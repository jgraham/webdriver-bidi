<pre class=metadata>
Title: WebDriver BiDi
Shortname: webdriver-bidi
Level: 1
Status: ED
Group: browser-testing-tools
URL: https://w3c.github.io/webdriver-bidi/
Repository: w3c/webdriver-bidi
No Editor: true
Abstract: This document defines the BiDirectional WebDriver Protocol, a mechanism for remote control of user agents.
Boilerplate: conformance no
Complain About: accidental-2119 yes, missing-example-ids yes
Default Ref Status: current
Indent: 2
</pre>

<pre class=anchors>
spec: RFC6455; urlPrefix: https://tools.ietf.org/html/rfc6455
  type: dfn
    text: WebSocket URI; url: section-3
    text: Establishes a WebSocket Connection; url: section-4.1
    text: Server-Side Requirements; url: section-4.2
    text: Reading the Client's Opening Handshake; url: section-4.2.1
    text: %x1 denotes a text frame; url: section-5.2
    text: Send a WebSocket Message; url: section-6.1
    text: A WebSocket Message Has Been Received; url: section-6.2
    text: The WebSocket Closing Handshake is Started; url: section-7.1.3
    text: The WebSocket Connection is Closed; url: section-7.1.4
    text: Fail the WebSocket Connection; url: section-7.1.7
    text: Status Codes; url: section-7.4
    text: Handling Errors in UTF-8-Encoded Data; url: section-8.1
spec: RFC8610; urlPrefix: https://tools.ietf.org/html/rfc8610
  type: dfn
    text: match a CDDL specification; url: appendix-C
spec: WEBDRIVER; urlPrefix: https://w3c.github.io/webdriver/
  type: dfn
    text: additional capability deserialization algorithm; url: dfn-additional-capability-deserialization-algorithm
    text: additional WebDriver capability; url: dfn-additional-webdriver-capability
    text: capability name; url: dfn-capability-name
    text: current session; url: dfn-current-session
    text: endpoint node; url: dfn-endpoint-node
    text: error code; url: dfn-error-code
    text: error; url: dfn-errors
    text: getting a property; url: dfn-get-a-property
    text: intermediary node; url: dfn-intermediary-node
    text: invalid argument; url: dfn-invalid-argument
    text: unknown command; url: dfn-unknown-command
    text: active sessions; url: dfn-active-session
    text: local end; url: dfn-local-ends
    text: matched capability serialization algorithm; url: dfn-matched-capability-serialization-algorithm
    text: remote end; url: dfn-remote-ends
    text: remote end steps; url: dfn-remote-end-steps
    text: session; url: dfn-sessions
    text: session ID; url: dfn-session-id
    text: set a property; url: dfn-set-a-property
    text: success; url: dfn-success
    text: try; url: dfn-try
    text: WebDriver new session algorithm; url: dfn-webdriver-new-session-algorithm
    text: window handle; url: dfn-window-handle
spec: ECMASCRIPT urlPrefix: https://tc39.es/ecma262/
  type: dfn
    text: realm; url: sec-code-realms
</pre>

<pre class="link-defaults">
spec:infra; type:dfn; for:/; text:set
</pre>

Introduction {#intro}
=====================

<em>This section is non-normative.</em>

[[WEBDRIVER|WebDriver]] defines a protocol for introspection and
remote control of user agents. This specification extends WebDriver by
introducing bidirectional communication. In place of the strict
command/response format of WebDriver, this permits events to stream
from the user agent to the controlling software, better matching the
evented nature of the browser DOM.

Infrastructure {#infrastructure}
==========================

This specification depends on the Infra Standard. [[!INFRA]]

Network protocol messages are defined using CDDL. [[!RFC8610]]

Protocol {#protocol}
==============

This section defines the basic concepts of the WebDriver BiDi
protocol. These terms are distinct from their representation at the
<a href=#transport>transport</a> layer.

The protocol is defined using a [[!RFC8610|CDDL]] definition. For the
convenience of implementors two seperate CDDL definitions are defined; the
<dfn>remote end definition</dfn> which defines the format of messages produced
on the [=local end=] and consumed on the [=remote end=], and the <dfn>local end
definition</dfn> which defines the format of messages produced on the [=remote
end=] and consumed on the [=local end=]

## Definition ## {#protocol-definition}

Issue: Should this be an appendix?

This section gives the initial contents of the [=remote end definition=] and
[=local end definition=]. These are augmented by the definition fragments defined in
the remainder of the specification.

[=Remote end definition=]

<pre class="cddl remote-cddl">
Command = {
  id: uint,
  CommandData,
  *text => any,
}

CommandData = (
  SessionCommand
)

EmptyParams = { *text }
</pre>

[=Local end definition=]

<pre class="cddl local-cddl">
Message = (
  CommandResponse //
  ErrorResponse //
  Event
)

CommandResponse = {
  id: uint,
  ResponseData,
  *text => any
}

ErrorResponse = {
  id: uint / null,
  error: (
    "unknown error" /
    "unknown method" /
    "invalid argument"
  ),
  message: text,
  stacktrace?: text,
}

ResultData = (
  EmptyResult //
  SessionResult
)

EmptyResult = {}

Event = (
  *text => any
)
</pre>

## Session ## {#session}

WebDriver BiDi uses the same [=/session=] concept as WebDriver.

## Modules ## {#protocol-modules}

The WebDriver BiDi protocol is organized into modules.

Each <dfn export>module</dfn> represents a collection of related
[=commands=] and [=events=] pertaining to a certain aspect of the user
agent. For example, a module might contain functionality for inspecting and
manipulating the DOM, or for script execution.

Each module has a <dfn>module name</dfn> which is a string. The
[=command name=] and [=event name=] for commands and events defined in the
module start with the [=module name=] followed by a period "<code>.</code>".

Modules which contain [=commands=] define [=remote end definition=]
fragments. These provide choices in the <code>CommandData</code> group for the
module's [=commands=], and can also define additional definition properties. They
can also define [=local end definition=] fragments that provide additional choices
in the <code>ResultData</code> group for the results of commands in the module.

Modules which contain events define [=local end definition=] fragments that are
choices in the <code>Event</code> group for the module's [=events=].

An implementation may define <dfn>extension modules</dfn>. These must have a
[=module name=] that contains a single colon "<code>:</code>" character. The
part before the colon is the prefix; this is typically the same for all
extension modules specific to a given implementation and should be unique for a
given implementation. Such modules extend the [=local end definition=] and [=remote
end definition=] providing additional groups as choices for the defined
[=commands=] and [=events=].

## Commands ## {#commands}

A <dfn export>command</dfn> is an asynchronous operation, requested by
the [=local end=] and run on the [=remote end=], resulting in either a
result or an error being returned to the [=local end=]. Multiple
commands can run at the same time, and commands can potentially be
long-running. As a consequence, commands can finish out-of-order.

Each [=command=] is defined by:

- A <dfn export for=command>command type</dfn> which is defined by a [=remote
   end definition=] fragment containing a group. Each such group has two fields:
    - <code>method</code> which is a string literal of the form <code>[module
      name].[method name]</code>. This is the <dfn export for=command>command
      name</dfn>.
    - <code>params</code> which defines a mapping containing data that to be passed into
      the command. The populated value of this map is the
      <dfn export for=command>command parameters</dfn>.
- A <dfn export for=command>result type</dfn>, which is defined by a [=local
  end definition=] fragment.
- A set of [=remote end steps=] which define the actions to take for a command
  given [=command parameters=] and return an instance of the command [=return
  type=].

When commands are send from the [=local end=] they have a command id. This is an
identifier used by the [=local end=] to identify the response from a particular
command. From the point of view of the [=remote end=] this identifier is opaque
and cannot be used internally to identify the command.

Note: This is because the command id is entirely controlled by the [=local end=]
and isn't necessarily unique over the course of a session. For example a [=local
end=] which ignores all responses could use the same command id for each command.

The <dfn export for=command>set of all command names</dfn> is a set containing
all the defined [=command names=], including any belonging to [=extension
modules=].

### Table of Commands ### {#table-of-commands}

<div class=non-normative>

<em>This section is non-normative.</em>

The following table of commands lists the available [=command|commands=] by
module and name.

<table class="simple">
   <tr>
      <th>Module Name</th>
      <th>Command Name</th>
      <th>Command</th>
   </tr>
   <tr>
      <td>session</td>
      <td>status</td>
      <td>[=commands/status|session.status=]</td>
   </tr>
</table>

</div>

## Events ## {#events}

An <dfn export>event</dfn> is a notification, sent by the [=remote
end=] to the [=local end=], signaling that something of interest has
occurred on the [=remote end=].

 - An <dfn export for=event>event type</dfn> is defined by a [=local
   end definition=] fragment containing a group. Each such group has two fields:
    - <code>method</code> which is a string literal of the form <code>[module
      name].[event name]</code>. This is the <dfn export for=event>event
      name</dfn>.

    - <code>params</code> which defines a mapping containing event data. The
      populated value of this map is the <dfn export for=command>event
      parameters</code>.
 - A <dfn export>remote end event trigger</dfn> which defines when the event is
   triggered and steps to construct the [=event type=] data.

A [=/session=] has a <dfn export for=event>global event set</dfn> which is a set
containing containing the event names for events that are enabled for all
browsing contexts. This initially contains the [=event name=] for events that
are <dfn export for=event>in the default event set</dfn>.

A [=/session=] has a <dfn export for=event>browsing context event map</dfn>,
which is a map with [=/browsing context=] keys and values that are maps from an
[=event name=] to a boolean indicating whether the specified event is enabled or
disabled for a given browsing context.

<div algorithm>

To determine if an <dfn export>event is enabled</dfn> given |session|,
|event name| and |browsing context|:

  1. While |browsing context| is not null:

    1. Let |event map| be the [=browsing context event map=] for |session|.

    1. If |event map| contains an entry for |browsing context|, let |browsing
       context events| be |event map|[|browsing context|].  Otherwise let
       |browsing context events| be null.

    1. If |browsing context events| is not null, and |browsing context events|
       contains an entry for |event name| return |browsing context
       events|[|event name|].

    1. Let |browsing context| be the [=parent browsing context=] of |browsing
       context|, if it has one, or null otherwise.

  1. If the [=global event set=] for |session| contains |event name| return
     true.

  1. Return false.

</div>

<div algorithm>

To <dfn>obtain a set of event names</dfn> given an |name|:

  1. Let |events| be an empty set.

  1. If |name| contains a U+002E (period):

    1. If |name| is the [=event name=] for an event, append |name| to |events|
       and return [=success=] with data |events|.

    1. Return an [=error=] with [=error code=] [=Invalid Argument=]

  1. Otherwise |name| is interpreted as representing all the events in a
     module. If |name| is not a [=module name=] return an [=error=] with
     [=error code=] [=Invalid Argument=].

  1. Append the [=event name=] for each [=event=] in the module with name |name| to
     |events|.

  1. Return [=success=] with data |events|.
</div>

## Processing Model ## {#processing-model}


<div algorithm>
To <dfn>process a command</dfn> given |data|:

   1. Match |data| against the [=remote end definition=]. If this results in a
      match:

      1. Let |result| be the result of running the [=remote end steps=]
         for the command with [=command name=] equal to the
         <code>method</code> property of |data| and with the [=command
         parameters=] from the matched data.

      1. Assert: if |result| is a [=success=] its data matches the
         definition for the [=result type=] corresponding to the command with name
         [=command name=].

      1. Return <var>result</var>.

   1. Otherwise there is no match. If |data| isn't a map or is a map without a
      property named </code>method</code> return an [=error=] with error code
      [=invalid argument=]. Otherwise let <var>command</var> be the value of
      the <code>method</code> property of |data|.

   1. If |command| is not in the [=set of all command names=], return an
      [=error=] with [=error code=] [=unknown command=].

   1. Return an [=error=] with [=error code=] [=invalid argument=].
</div>

Transport {#transport}
======================

Message transport is provided using the WebSocket protocol.
[[!RFC6455]]

Note: In the terms of the WebSocket protocol, the [=local end=] is the
client and the [=remote end=] is the server / remote host.

Note: The encoding of [=commands=] and [=events=] as messages is
similar to JSON-RPC, but this specification does not normatively
reference it. [[JSON-RPC]] The normative requirements on [=remote
ends=] are instead given as a precise processing model, while no
normative requirements are given for [=local ends=].

A <dfn>WebSocket listener</dfn> is a network endpoint that is able
to accept incoming [[!RFC6455|WebSocket]] connections.

A [=WebSocket listener=] has a <dfn for=listener>host</dfn>, a <dfn
for=listener>port</dfn>, a <dfn for=listener>secure flag</dfn>, and a
<dfn>list of WebSocket resources</dfn>.

When a [=WebSocket listener=] |listener| is created, a [=remote end=]
must start to listen for WebSocket connections on the host and port
given by |listener|'s [=listener/host=] and [=listener/port=]. If
|listener|'s [=listener/secure flag=] is set, then connections
established from |listener| must be TLS encrypted.

A [=remote end=] has a [=set=] of [=WebSocket listeners=] <dfn>active
listeners</dfn>, which is initially empty.

A WebDriver [=/session=] has a <dfn>WebSocket connection</dfn> which is
a network connection that follows the requirements of the
[[!RFC6455|WebSocket protocol]].

<div>

When a client [=establishes a WebSocket connection=] |connection| by
connecting to one of the set of [=active listeners=] |listener|, the
implementation must proceed according to the WebSocket [=server-side
requirements=], with the following steps run when deciding whether to
accept the incoming connection:

1. Let |resource name| be the resource name from [=reading the
   client's opening handshake=]. If |resource name| is not in
   |listener|'s [=list of WebSocket resources=], then stop
   running these steps and act as if the requested service is not
   available.

2. [=Get a session ID for a WebSocket resource=] with |resource name|
   and let |session id| be that value. If |session id| is null then
   stop running these steps and act as if the requested service is not
   available.

3. If there is a [=/session=] in the list of [=active sessions=] with
   |session id| as its [=session ID=] then let |session| be that
   session. Otherwise stop running these steps and act as if the
   requested service is not available.

4. Run any other implementation-defined steps to decide if the
   connection should be accepted, and if it is not stop running these
   steps and act as if the requested service is not available.

5. Otherwise set |session|'s [=WebSocket connection=] to
   |connection|, and proceed with the WebSocket [=server-side
   requirements=] when a server chooses to accept an incoming connection.

Issue: Do we support > 1 connection for a single session?

</div>

When [=a WebSocket message has been received=] for a [=WebSocket
connection=] |connection| with type |type| and data |data|, a [=remote
end=] must [=handle an incoming message=] given |connection|, |type|
and |data|.

When [=the WebSocket closing handshake is started=] or when [=the
WebSocket connection is closed=] for a [=WebSocket connection=]
|connection|, a [=remote end=] must [=handle a connection closing=]
given |connection|.

Note: Both conditions are needed because it is possible for a
WebSocket connection to be closed without a closing handshake.

<div algorithm>

To <dfn lt="construct a WebSocket resource name|constructing a
WebSocket resource name">construct a WebSocket resource name</dfn>
given a [=/session=] |session|:

1. Return the result of concatenating the string "<code>/session/</code>"
   with |session|'s [=session ID=].

</div>

<div algorithm>

To <dfn lt="construct a WebSocket URL|constructing a WebSocket
URL">construct a WebSocket URL</dfn> given a [=WebSocket listener=]
|listener| and [=/session=] |session|:

1. Let |resource name| be the result of [=constructing a WebSocket
   resource name=] given |session|.

2. Return a [=WebSocket URI=] constructed with host set to
   |listener|'s [=listener/host=], port set to |listener|'s
   [=listener/port=], path set to |resource name|, following the wss-URI
   construct if |listener|'s [=listener/secure flag=] is set and the ws-URL
   construct otherwise.

</div>

<div algorithm>

To <dfn>get a session ID for a WebSocket resource</dfn>
given |resource name|:

1. If |resource name| doesn't begin with the byte string
   "<code>/session/</code>", return null.

2. Let |session id| be the bytes in |resource name| following the
   "<code>/session/</code>" prefix.

3. If |session id| is not the string representation of a
   [[!RFC4122|UUID]], return null.

4. Return |session id|.

</div>

<div algorithm>
To <dfn>start listening for a WebSocket connection</dfn> given a
[=/session=] |session|:

 1. If there is an existing [=WebSocket listener=] in the set of
    [=active listeners=] which the [=remote end=] would like to reuse,
    let |listener| be that listener. Otherwise let |listener| be a new
    [=WebSocket listener=] with [=implementation-defined=]
    [=listener/host=], [=listener/port=], [=listener/secure flag=],
    and an empty [=list of WebSocket resources=].

 2. Let |resource name| be the result of [=constructing a WebSocket
    resource name=] given |session|.

 3. Append |resource name| to the [=list of WebSocket resources=] for
    |listener|.

 4. [=set/Append=] |listener| to the [=remote end=]'s [=active
     listeners=].

 5. Return |listener|.

</div>

Note: An [=intermediary node=] handling multiple sessions can use one
or many WebSocket listeners. [[!WEBDRIVER|WebDriver]] defines that
an [=endpoint node=] supports at most one session at a time, so it's
expected to only have a single listener.

Note: For an [=endpoint node=] the [=listener/host=] in the above steps will
typically be "<code>localhost</code>".

<div algorithm>
To <dfn>handle an incoming message</dfn> given a [=WebSocket connection=]
|connection|, type |type| and data |data|:

 1. If |type| is not [=%x1 denotes a text frame|text=], return.

    Issue: Should we instead close |connection| with [=status
    codes|status code=] 1003, or [=respond with an error=]?

 1. [=Assert=]: |data| is a [=scalar value string=], because the
     WebSocket [=handling errors in UTF-8-encoded data=] would already
     have [=fail the WebSocket connection|failed the WebSocket
     connection=] otherwise.

    Issue: Nothing seems to define what [=status codes|status code=]
    is used for UTF-8 errors.

 1. Let |result| be the result of [=process a command|processing a
    command=] given |data|.

 1. If |result| is an [=error=], then [=respond with an error=] given
    |connection|, |data|, and |result|'s [=error code=], and finally return.

 1. Let |response| be a new [=map=] with the following properties:

   <dl>
      <dt>"id"</dt>
      <dd>The value of |parsed|["<code>id</code>"]</dd>

      <dt>"result"</dt>
      <dd>The value of |result|</dd>
   </dl>

 1. Let |serialized| be the result of [=serialize JSON to
    bytes|serializing JSON to bytes=] given |response|.

 1. [=Send a WebSocket message=] comprised of |serialized| over
    |connection|.

</div>

<div algorithm>
To <dfn>respond with an error</dfn> given a [=WebSocket connection=]
|connection|, |data| and |error code|:

 1. Let |command id| be null.

 1.  Let |parsed| be the result of [=parse JSON into Infra values|parsing JSON
     into Infra values=] given |data|. If this does not throw an exception, and
     results in a map that contains "<code>id</code>", then let |command id| be
     |parsed|["<code>id</code>"].

 1. If |command id| is not an integer greater than or equal to zero, let
    |command id| be null.

 1. Let |error data| be a new map matching the <code>ErrorResponse</code>
    production in the [=local end definition=], with the <code>id</code> field
    set to |command id|, the <code>error</code> field set to |error code|, the
    <code>message</code> field set to an implementation-defined string
    containing a human-readable definition of the error that occured and the
    <code>stacktrace</code> field optionally set to an implementation-defined
    string containing a stack trace report of the active stack frames at the
    time when the error occurred.

 1. Let |response| be the result of [=serialize JSON to bytes|serializing JSON
    to bytes=] given |error data|.

 1. [=Send a WebSocket message=] comprised of |response| over |connection|.

</div>

<div algorithm>
To |serialize a map as JSON| given |map|

1. Let |object| be a new [=Object=]

1. For each |key| → |value| of |map|:

  1.  [=Set=](|object|, key, value, false)

1. Return the result of [=serialize JSON to bytes|serializing JSON to bytes=]
   given |object|

</div>

<div algorithm>
To <dfn>handle a connection closing</dfn> given a
[=WebSocket connection=] |connection|:

 1. If there is a WebDriver [=/session=] with |connection| as its [=connection=],
    set the [=connection=] on that [=/session=] to null.

Issue: This should also reset any internal state

</div>

Note: This does not end any [=/session=].

Issue: Need to hook in to the session ending to allow the UA to close
the listener if it wants.

## Establishing a Connection ## {#establishing}

WebDriver clients opt in to a bidirectional connection by requesting a
capability with the name "<code>webSocketUrl</code>" and value
true.

This specification defines an
[=additional webdriver capability=] with the [=capability name=] "<code>webSocketUrl</code>".

<div algorithm="webSocketUrl capability deserialization algorithm">
The [=additional capability deserialization algorithm=] for the
"<code>webSocketUrl</code>" capability, with parameter |value| is:

 1. If |value| is not a boolean, return [=error=] with [=error code|code=]
    [=invalid argument=].

 2. Return [=success=] with data |value|.

</div>

<div algorithm="webSocketUrl capability serialization algorithm">
The [=matched capability serialization algorithm=] for the "<code>webSocketUrl</code>" capability,
with parameter |value| is:

 1. If |value| is false, return [=success=] with data null.

 2. Return [=success=] with data true.

</div>

<div algorithm="webSocketUrl new session algorithm">
The [=WebDriver new session algorithm=] defined by this specification,
with parameters |session| and |capabilities| is:

 1. Let |webSocketUrl| be the result of [=getting a property=] named
    "<code>webSocketUrl</code>" from |capabilities|.

 2. If |webSocketUrl| is undefined, return.

 3. [=Assert=]: |webSocketUrl| is true.

 4. Let |listener| be the result of [=start listening for a WebSocket
    connection=] given |session|.

 5. Set |webSocketUrl| to the result of [=constructing a WebSocket
    URL=] given |listener| and |session|.

 6. [=Set a property=] on |capabilities| named
    "<code>webSocketUrl</code>" to |webSocketUrl|.

</div>

Common Data Types {#data-types}
===============================

This section defines data types which are common to many modules.

## Browsing Context ## {#data_types-browsing_context}

[=remote end schema=] and [=local end schema=]
```
BrowsingContext = text;
```

Each [=/browsing context=] has an associated <dfn export>browsing context id</dfn>,
which is a string uniquely identifying that browsing context. For browsing
contexts with an associated WebDriver [=window handle=] the [=/browsing context
id=] must be the same as the [=window handle=].

## Realm ## {#data-types-realm}

[=remote end schema=] and [=local end schema=]
```
Realm = text;
```

Each [=realm=] has an associated <dfn export>realm id</dfn>, which is a string
uniquely identifying that realm.

Modules {#modules}
==================

## Session ## {#module-session}

The <dfn export for=modules>session</dfn> module contains commands and
events for monitoring the status of the remote end.

### Definition ### {#module-session-definition}

[=remote end definition=]

<pre class="cddl remote-cddl">
SessionCommand = (StatusCommand //
                  SubscribeCommand)
</pre>

[=local end definition=]

<pre class="cddl local-cddl">

SessionResult = (StatusResult)

</pre>

<div algorithm>

To <dfn lt="updating the event map">update the event map</dfn>, given
|session|, |list of event names|, |list of contexts|, and |enabled|:

  1. Let |global event set| be the [=global event set=] for |session|.

  1. Let |event map| be the [=browsing context event map=] for |session|.

  1. Let |event names| be an empty set.

    1. For each entry |name| in the |list of event names|, let |event names| be
       the union of |event names| and the result of [=trying=] to [=obtain a set
       of event names=] with |name|.

    1. If the |list of contexts| is null:

      1. If |enabled| is true, for each |event name| in |event names|,
         append |event name| to |global event set|. Otherwise for for each
         |event name| in |event names|, if the |global event set| contains
         |event name|, remove |event name| from the |global event set|.

      1. Return

    1. Let |targets| be an empty list.

    1. For each entry |context id| in the |list of contexts|:

      1. If there is no browsing context with [=browsing context id=] |context id| return
         [=error=] with [=error code=] [=invalid argument=]

      1. Let |context| be the browsing context with id |context id|. If the
         |event map| does not contain an entry for |context|,
         set the value of the entry for |context| to a new empty map.

      1. Get the entry from the |event map| for |context| and append it to
         |targets|.

    1. For each |target| in |targets|:

      1. For each |event name| in |event names|:

        1. Set |target|[|event name|] to |enabled|.

    1. Return [=success=] with data null.

    Note: Implementations that do additional work when an event is enabled,
    e.g. subscribing to the relevant engine-internal events, will likely perform
    those additional steps when updating the event map. This specification uses
    a model where hooks are always called and then the event map is used to
    filter only those that ought to be returned to the local end.
</div>

### Status ### {#command-session-status}

The <dfn for=commands>status</dfn> command returns information about
whether a remote end is in a state in which it can create new sessions,
but may additionally include arbitrary meta information that is specific
to the implementation.

<dl>
   <dt>Command Type</dt>
   <dd>
      <pre class="cddl remote-cddl">
      StatusCommand = {
        method: "session.status",
        params: EmptyParams,
      }
      </pre>
   </dd>
   <dt>Return Type</dt>
   <dd>
      <pre class="cddl local-cddl">
      StatusResult = {
         ready: bool,
         message: text,
      }
      </pre>
   </dd>
</dl>

The [=remote end steps=] are:

1. Let |body| be a new [=map=] with the following properties:

   <dl>
      <dt>"ready"</dt>
      <dd>The [=remote end=]’s readiness state.</dd>

      <dt>"message"</dt>
      <dd>An implementation-defined string explaining the [=remote end=]’s readiness
   state.</dd>
   </dl>

2. Return [=success=] with data |body|

### Subscribe ### {#command-session-subscribe}

The <dfn export for=commands>subscribe</dfn> command enables certain events either
globally or for a set of browsing contexts

Issue: This needs to be generalized to work with realms too

<dl>
   <dt>Command Type</dt>
   <dd>
      <pre class="cddl remote-cddl">
      SubscribeCommand = {
        method: "session.subscribe",
        params: SubscribeParameters
      }

      SubscribeParameters = {
        events: [*text],
        contexts?: [*BrowsingContext],
      }
      </pre>
   </dd>
   <dt>Return Type</dt>
   <dd>
    <pre class="cddl local-cddl">
        EmptyResult
    </pre>
   </dd>
</dl>

The [=remote end steps=] with |command parameters| are:
<div algorithm="remote end steps for session.subscribe">
    1. Let the |list of event names| be the value of the <code>events</code> field of
       |command parameters|.

    1. Let the |list of contexts| be the value of the <code>contexts</code>
       field of |command parameters| if it is present or null if it isn't.

    1. Return the result of [=updating the event map=] with [=current session=],
       |list of event names|, |list of contexts| and enabled true.
</div>

### Unsubscribe ### {#command-session-unsubscribe}

The <dfn export for=commands>unsubscribe</dfn> command disables events either
globally or for a set of browsing contexts

Issue: This needs to be generalised to work with realms too

<dl>
   <dt>Command Type</dt>
   <dd>
     <pre class="cddl remote-cddl">
       UnsubscribeCommand = {
         method: "session.unsubscribe",
         params: SubscribeParameters
       }
     </pre>
   </dd>
   <dt>Return Type</dt>
   <dd>
      <pre class="cddl local-cddl">
        EmptyResult
      </pre>
   </dd>
</dl>

The [=remote end steps=] with |command parameters| are:
<div algorithm="remote end steps for session.unsubscribe">
    1. Let the |list of event names| be the value of the <code>events</code> field of
       |command parameters|.

    1. Let the |list of contexts| be the value of the <code>contexts</code>
       field of |command parameters| if it is present or null if it isn't.

    1. Return the result of [=updating the event map=] with [=current session=],
       |list of event names|, |list of contexts| and enabled false.
</div>

<pre class=metadata>
Title: WebDriver BiDi
Shortname: webdriver-bidi
Level: 1
Status: ED
Group: browser-testing-tools
URL: https://w3c.github.io/webdriver-bidi/
Repository: w3c/webdriver-bidi
No Editor: true
Abstract: This document defines the BiDirectional WebDriver Protocol, a mechanism for remote control of user agents.
Boilerplate: conformance no
Complain About: accidental-2119 yes, missing-example-ids yes
Default Ref Status: current
Indent: 2
</pre>

<pre class=anchors>
spec: RFC6455; urlPrefix: https://tools.ietf.org/html/rfc6455
  type: dfn
    text: WebSocket URI; url: section-3
    text: Establishes a WebSocket Connection; url: section-4.1
    text: Server-Side Requirements; url: section-4.2
    text: Reading the Client's Opening Handshake; url: section-4.2.1
    text: %x1 denotes a text frame; url: section-5.2
    text: Send a WebSocket Message; url: section-6.1
    text: A WebSocket Message Has Been Received; url: section-6.2
    text: The WebSocket Closing Handshake is Started; url: section-7.1.3
    text: The WebSocket Connection is Closed; url: section-7.1.4
    text: Fail the WebSocket Connection; url: section-7.1.7
    text: Status Codes; url: section-7.4
    text: Handling Errors in UTF-8-Encoded Data; url: section-8.1
spec: WEBDRIVER; urlPrefix: https://w3c.github.io/webdriver/
  type: dfn
    text: additional capability deserialization algorithm; url: dfn-additional-capability-deserialization-algorithm
    text: additional WebDriver capability; url: dfn-additional-webdriver-capability
    text: capability name; url: dfn-capability-name
    text: endpoint node; url: dfn-endpoint-node
    text: error code; url: dfn-error-code
    text: error; url: dfn-errors
    text: getting a property; url: dfn-get-a-property
    text: intermediary node; url: dfn-intermediary-node
    text: invalid argument; url: dfn-invalid-argument
    text: active sessions; url: dfn-active-session
    text: local end; url: dfn-local-ends
    text: matched capability serialization algorithm; url: dfn-matched-capability-serialization-algorithm
    text: remote end; url: dfn-remote-ends
    text: remote end steps; url: dfn-remote-end-steps
    text: session; url: dfn-sessions
    text: session ID; url: dfn-session-id
    text: set a property; url: dfn-set-a-property
    text: success; url: dfn-success
    text: WebDriver new session algorithm; url: dfn-webdriver-new-session-algorithm
</pre>

<pre class="link-defaults">
spec:infra; type:dfn; for:/; text:set
</pre>

Introduction {#intro}
=====================

<em>This section is non-normative.</em>

[[WEBDRIVER|WebDriver]] defines a protocol for introspection and
remote control of user agents. This specification extends WebDriver by
introducing bidirectional communication. In place of the strict
command/response format of WebDriver, this permits events to stream
from the user agent to the controlling software, better matching the
evented nature of the browser DOM.

Model {#model}
==============

This section defines the basic concepts of the WebDriver BiDi
protocol. These terms are distinct from their representation at the
<a href=#transport>transport</a> layer.

Note: These definitions do not form any normative requirements, rather
they are used elsewhere as part of such requirements.

## Commands ## {#commands}

A <dfn export>command</dfn> is an asynchronous operation, requested by
the [=local end=] and run on the [=remote end=], resulting in either a
result or an error being returned to the [=local end=]. Multiple
commands can run at the same time, and commands can potentially be
long-running. As a consequence, commands can finish out-of-order.

Each concrete [=command=] type is defined by:
 - A string <dfn export for=command>name</dfn>, implicit in its
   definition.
 - A set of <dfn export for=command>parameters</dfn>, which are the
   inputs to the command
 - A set of [=remote end steps=].
 - A <dfn export for=command>return type</dfn>, which may be null.

## Events ## {#events}

An <dfn export>event</dfn> is a notification, sent by the [=remote
end=] to the [=local end=], signaling that something of interest has
occurred on the [=remote end=].

Each concrete [=event=] type is defined by:
 - A string <dfn export for=event>name</dfn>, implicit in its
   definition.
 - A set of <dfn export for=event>parameters</dfn>, which are the
   details of the event that has occurred.

Transport {#transport}
======================

Message transport is provided using the WebSocket protocol.
[[!RFC6455]]

Note: In the terms of the WebSocket protocol, the [=local end=] is the
client and the [=remote end=] is the server / remote host.

Note: The encoding of [=commands=] and [=events=] as messages is
similar to JSON-RPC, but this specification does not normatively
reference it. [[JSON-RPC]] The normative requirements on [=remote
ends=] are instead given as a precise processing model, while no
normative requirements are given for [=local ends=].

A <dfn>WebSocket listener</dfn> is a network endpoint that is able
to accept incoming [[!RFC6455|WebSocket]] connections.

A [=WebSocket listener=] has a <dfn for=listener>host</dfn>, a <dfn
for=listener>port</dfn>, a <dfn for=listener>secure flag</dfn>, and a
<dfn>list of WebSocket resources</dfn>.

When a [=WebSocket listener=] |listener| is created, a [=remote end=]
must start to listen for WebSocket connections on the host and port
given by |listener|'s [=listener/host=] and [=listener/port=]. If
|listener|'s [=listener/secure flag=] is set, then connections
established from |listener| must be TLS encrypted.

A [=remote end=] has a [=set=] of [=WebSocket listeners=] <dfn>active
listeners</dfn>, which is initially empty.

A WebDriver [=session=] has a <dfn>WebSocket connection</dfn> which is
a network connection that follows the requirements of the
[[!RFC6455|WebSocket protocol]].

<div>

When a client [=establishes a WebSocket connection=] |connection| by
connecting to one of the set of [=active listeners=] |listener|, the
implementation must proceed according to the WebSocket [=server-side
requirements=], with the following steps run when deciding whether to
accept the incoming connection:

1. Let |resource name| be the resource name from [=reading the
   client's opening handshake=]. If |resource name| is not in
   |listener|'s [=list of WebSocket resources=], then stop
   running these steps and act as if the requested service is not
   available.

2. [=Get a session ID for a WebSocket resource=] with |resource name|
   and let |session id| be that value. If |session id| is null then
   stop running these steps and act as if the requested service is not
   available.

3. If there is a [=session=] in the list of [=active sessions=] with
   |session id| as its [=session ID=] then let |session| be that
   session. Otherwise stop running these steps and act as if the
   requested service is not available.

4. Run any other implementation-defined steps to decide if the
   connection should be accepted, and if it is not stop running these
   steps and act as if the requested service is not available.

5. Otherwise set |session|'s [=WebSocket connection=] to
   |connection|, and proceed with the WebSocket [=server-side
   requirements=] when a server chooses to accept an incoming connection.

Issue: Do we support > 1 connection for a single session?

</div>

When [=a WebSocket message has been received=] for a [=WebSocket
connection=] |connection| with type |type| and data |data|, a [=remote
end=] must [=handle an incoming message=] given |connection|, |type|
and |data|.

When [=the WebSocket closing handshake is started=] or when [=the
WebSocket connection is closed=] for a [=WebSocket connection=]
|connection|, a [=remote end=] must [=handle a connection closing=]
given |connection|.

Note: Both conditions are needed because it is possible for a
WebSocket connection to be closed without a closing handshake.

<div algorithm>

To <dfn lt="construct a WebSocket resource name|constructing a
WebSocket resource name">construct a WebSocket resource name</dfn>
given a [=session=] |session|:

1. Return the result of concatenating the string "<code>/session/</code>"
   with |session|'s [=session ID=].

</div>

<div algorithm>

To <dfn lt="construct a WebSocket URL|constructing a WebSocket
URL">construct a WebSocket URL</dfn> given a [=WebSocket listener=]
|listener| and [=session=] |session|:

1. Let |resource name| be the result of [=constructing a WebSocket
   resource name=] given |session|.

2. Return a [=WebSocket URI=] constructed with host set to
   |listener|'s [=listener/host=], port set to |listener|'s
   [=listener/port=], path set to |resource name|, following the wss-URI
   construct if |listener|'s [=listener/secure flag=] is set and the ws-URL
   construct otherwise.

</div>

<div algorithm>

To <dfn>get a session ID for a WebSocket resource</dfn>
given |resource name|:

1. If |resource name| doesn't begin with the byte string
   "<code>/session/</code>", return null.

2. Let |session id| be the bytes in |resource name| following the
   "<code>/session/</code>" prefix.

3. If |session id| is not the string representation of a
   [[!RFC4122|UUID]], return null.

4. Return |session id|.

</div>

<div algorithm>
To <dfn>start listening for a WebSocket connection</dfn> given a
[=session=] |session|:

 1. If there is an existing [=WebSocket listener=] in the set of [=
    active listeners=] which the [=remote end=] would like to reuse,
    let |listener| be that listener. Otherwise let |listener| be a new
    [=WebSocket listener=] with [=implementation-defined=]
    [=listener/host=], [=listener/port=], [=listener/secure flag=],
    and an empty [=list of WebSocket resources=].

 2. Let |resource name| be the result of [=constructing a WebSocket
    resource name=] given |session|.

 3. Append |resource name| to the [=list of WebSocket resources=] for
    |listener|.

 4. [=set/Append=] |listener| to the [=remote end=]'s [=active
     listeners=].

 5. Return |listener|.

</div>

Note: An [=intermediary node=] handling multiple sessions can use one
or many WebSocket listeners. [[!WEBDRIVER|WebDriver]] defines that
an [=endpoint node=] supports at most one session at a time, so it's
expected to only have a single listener.

Note: For an [=endpoint node=] the [=listener/host=] in the above steps will
typically be "<code>localhost</code>".

<div algorithm>
To <dfn>handle an incoming message</dfn> given a [=WebSocket connection=]
|connection|, type |type| and data |data|:

 1. If |type| is not [=%x1 denotes a text frame|text=], return.

    Issue: Should we instead close |connection| with [=status
    codes|status code=] 1003, or [=respond with an error=]?

 2. [=Assert=]: |data| is a [=scalar value string=], because the
     WebSocket [=handling errors in UTF-8-encoded data=] would already
     have [=fail the WebSocket connection|failed the WebSocket
     connection=] otherwise.

    Issue: Nothing seems to define what [=status codes|status code=]
    is used for UTF-8 errors.

 3. Let |parsed| be the result of [=parse JSON into Infra
    values|parsing JSON into Infra values=] given |data|. If this
    throws an exception, then [=respond with an error=] given
    |connection| and [=error code=] [=invalid argument=], and finally
    return.
    <!-- corresponds to Parse error (-32700) in JSON-RPC -->

 4. If any of the following conditions are false:

     1. |parsed| is a [=map=]

     2. |parsed|["<code>id</code>"] <a for=map>exists</a> and is an
        integer in the range [0, 2147483647].

         Issue: That's <i>2<sup>31</sup> - 1</i>, the largest signed
         32-bit integer. Should we allow up to <i>2<sup>53</sup> -
         1</i>, the largest number such that <i>N</i> and <i>N + 1</i>
         both have exact representations in a JS Number?

     3. |parsed|["<code>method</code>"] <a for=map>exists</a> and is a
        string.

     4. |parsed|["<code>params</code>"], if it <a for=map>exists</a>,
        is a [=map=].

     Issue: Should we fail if there are unknown keys in |parsed|? CDP
     does, but it's very unusual for unversioned web platform APIs.

    Then [=respond with an error=] given |connection| and [=error
    code=] [=invalid argument=], and finally return.
    <!-- corresponds to Invalid Request (-32600) in JSON-RPC -->

 5. Issue: Command-specific parameter validation and dispatch.

</div>

<div algorithm>
To <dfn>respond with an error</dfn> given a [=WebSocket connection=]
|connection| and an [=error code=] |code|:

 1. Issue: Form a valid JSON |errorObject| given |code|.

 2. [=Send a WebSocket message=] comprised of |errorObject| over
    |connection|.

</div>

<div algorithm>
To <dfn>handle a connection closing</dfn> given a
[=WebSocket connection=] |connection|:

 1. If there is a WebDriver [=session=] with |connection| as its [=connection=],
    set the [=connection=] on that [=session=] to null.

Issue: This should also reset any internal state

</div>

Note: This does not end any [=session=].

Issue: Need to hook in to the session ending to allow the UA to close
the listener if it wants.

## Establishing a Connection ## {#establishing}

WebDriver clients opt in to a bidirectional connection by requesting a
capability with the name "<code>webSocketUrl</code>" and value
true.

This specification defines an
[=additional webdriver capability=] with the [=capability name=] "<code>webSocketUrl</code>".

<div algorithm="webSocketUrl capability deserialization algorithm">
The [=additional capability deserialization algorithm=] for the
"<code>webSocketUrl</code>" capability, with parameter |value| is:

 1. If |value| is not a boolean, return [=error=] with [=error code|code=]
    [=invalid argument=].

 2. Return [=success=] with data |value|.

</div>

<div algorithm="webSocketUrl capability serialization algorithm">
The [=matched capability serialization algorithm=] for the "<code>webSocketUrl</code>" capability,
with parameter |value| is:

 1. If |value| is false, return [=success=] with data null.

 2. Return [=success=] with data true.

</div>

<div algorithm="webSocketUrl new session algorithm">
The [=WebDriver new session algorithm=] defined by this specification,
with parameters |session| and |capabilities| is:

 1. Let |webSocketUrl| be the result of [=getting a property=] named
    "<code>webSocketUrl</code>" from |capabilities|.

 2. If |webSocketUrl| is undefined, return.

 3. [=Assert=]: |webSocketUrl| is true.

 4. Let |listener| be the result of [=start listening for a WebSocket
    connection=] given |session|.

 5. Set |webSocketUrl| to the result of [=constructing a WebSocket
    URL=] given |listener| and |session|.

 6. [=Set a property=] on |capabilities| named
    "<code>webSocketUrl</code>" to |webSocketUrl|.

</div>

Conformance {#conformance}
==========================

This specification depends on the Infra Standard. [[!INFRA]]

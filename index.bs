<pre class=metadata>
Title: WebDriver BiDi
Shortname: webdriver-bidi
Level: 1
Status: ED
Group: browser-testing-tools
URL: https://w3c.github.io/webdriver-bidi/
Repository: w3c/webdriver-bidi
No Editor: true
Abstract: This document defines the BiDirectional WebDriver Protocol, a mechanism for remote control of user agents.
Complain About: accidental-2119 yes, missing-example-ids yes
Default Ref Status: current
Indent: 2
</pre>

<pre class=anchors>
spec: RFC6455; urlPrefix: https://tools.ietf.org/html/rfc6455
  type: dfn
    text: WebSocket URI; url: section-3
    text: %x1 denotes a text frame; url: section-5.2
    text: Send a WebSocket Message; url: section-6.1
    text: A WebSocket Message Has Been Received; url: section-6.2
    text: The WebSocket Closing Handshake is Started; url: section-7.1.3
    text: Fail the WebSocket Connection; url: section-7.1.7
    text: Status Codes; url: section-7.4
    text: Handling Errors in UTF-8-Encoded Data; url: section-8.1
spec: WEBDRIVER; urlPrefix: https://w3c.github.io/webdriver/
  type: dfn
    text: additional capability deserialization algorithm; url: dfn-additional-capability-deserialization-algorithm
    text: additional WebDriver capability; url: dfn-additional-webdriver-capability
    text: capability name; url: dfn-capability-name
    text: endpoint node; url: dfn-endpount-node
    text: error code; url: dfn-error-code
    text: error; url: dfn-errors
    text: getting a property; url: dfn-get-a-property
    text: invalid argument; url: dfn-invalid-argument
    text: local end; url: dfn-local-ends
    text: matched capability serialization algorithm; url: dfn-matched-capability-serialization-algorithm
    text: remote end; url: dfn-remote-ends
    text: session; url: dfn-sessions
    text: session ID; url: dfn-session-id
    text: set a property; url: dfn-set-a-property
    text: success; url: dfn-success
    text: WebDriver new session algorithm; url: dfn-webdriver-new-session-algorithm
</pre>

Introduction {#intro}
=====================

<em>This section is non-normative.</em>

[[WEBDRIVER|WebDriver]] defines a protocol for introspection and
remote control of user agents. This specification extends WebDriver by
introducing bidirectional communication. In place of the strict
command/response format of WebDriver, this permits events to stream
from the user agent to the controlling software, better matching the
evented nature of the browser DOM.

Model {#model}
==============

This section defines the basic concepts of the WebDriver BiDi
protocol. These terms are distinct from their representation at the
<a href=#transport>transport</a> layer.

Note: These definitions do not form any normative requirements, rather
they are used elsewhere as part of such requirements.

A <dfn export>command</dfn> is sent by the [=local end=] to the
[=remote end=], requesting it to perform some action. A [=command=]
consists of:
 - An <dfn export for=command>id</dfn> (integer) to be used in the
    resulting [=response=] or [=error=].
 - A <dfn export for=command>name</dfn> (string)
 - <dfn export for=command>parameters</dfn> ([=map=] with string
    <a for=map>keys</a> and any type as <a for=map>values</a>)

A <dfn export>response</dfn> is sent by the [=remote end=] to the
[=local end=] in response to a specific [=command=], and signifies the
success of that command. A [=response=] consists of:
 - An <dfn export for=response>id</dfn> (integer) equal to the
    corresponding [=command=]'s <a for=command>id</a>.
 - A <dfn export for=response>result</dfn> (any type)

An <dfn export>error</dfn> is sent by the [=remote end=] to the
[=local end=] in response to a specific [=command=], and signifies the
failure of that command. An [=error=] consists of:
 - An <dfn export for=error>id</dfn> (integer) equal to the
    corresponding [=command=]'s <a for=command>id</a>.
 - A <dfn export for=error>code</dfn> (a WebDriver [=error code=]
    string)
 - A <dfn export for=error>message</dfn> (string)
 - Optional <dfn export for=error>data</dfn> (any type)

A <dfn export>notification</dfn> is sent by the [=remote end=] to the
[=local end=]. It is similar to a [=response=], but does not
correspond to a specific [=command=]. A [=notification=] consists of:
 - A <dfn export for=notification>name</dfn> (string)
 - <dfn export for=notification>parameters</dfn> ([=map=] with string
    <a for=map>keys</a> and any type as <a for=map>values</a>)

Issue: Should the strings here be [=strings=] (a sequence of unsigned
16-bit integers) or [=scalar value strings=]?

Transport {#transport}
======================

Message transport is provided using the WebSocket protocol.
[[!RFC6455]]

Note: In the terms of the WebSocket protocol, the [=local end=] is the
client and the [=remote end=] is the server / remote host.

Note: The encoding of commands and events as messages is similar to
JSON-RPC, but this specification does not normatively reference it.
[[JSON-RPC]] The normative requirements on [=remote ends=] are instead
given as a precise processing model, while no normative requirements
are given for [=local ends=].

A WebDriver [=session=] has a <dfn>WebSocket connection</dfn>, which
is a network connection, and a <dfn>WebSocket URL</dfn>, which is a
string. These are both initially null.

When [=a WebSocket message has been received=] for a [=WebSocket
connection=] |connection| with type |type| and data |data|, a [=remote
end=] must [=handle an incoming message=] given |connection|, |type|
and |data|.

When [=the WebSocket closing handshake is started=] for a [=WebSocket
connection=] |connection|, a [=remote end=] must [=close the WebSocket
connection=] given |connection|.

<div algorithm>
To <dfn>start listening for a WebSocket connection</dfn> given a
[=session=] |session|:

 1. Set up a network connection that listens on an implementation-defined
    hostname |host| and port |port|. The connection may TLS encrypted, in which
    case let |secure| be true, otherwise let |secure| be false. Set the
    [=connection=] to this network connection.

 2. Let |path| be the result of concatenating the string "<code>session/</code>"
    with |session|'s [=session ID=].

 3. Let |url| be the result of constructing a [=WebSocket URI=] with scheme
    "<code>wss</code>" if |secure| is true or "<code>ws</code>"
    otherwise, host |host|, port |port|, path |path| and empty query.

 4. Set |session|'s [=WebSocket URL=] to |url|.

Issue: This confuses the server listening socket with the actual
websocket connection

</div>

Note: For an [=endpoint node=] the hostname in the above steps will be
typically be "<code>localhost</code>".

<div algorithm>
To <dfn>handle an incoming message</dfn> given a [=WebSocket connection=]
|connection|, type |type| and data |data|:

 1. If |type| is not [=%x1 denotes a text frame|text=], return.

    Issue: Should we instead close |connection| with [=status
    codes|status code=] 1003, or [=respond with an error=]?

 2. [=Assert=]: |data| is a [=scalar value string=], because the
     WebSocket [=handling errors in UTF-8-encoded data=] would already
     have [=fail the WebSocket connection|failed the WebSocket
     connection=] otherwise.

    Issue: Nothing seems to define what [=status codes|status code=]
    is used for UTF-8 errors.

 3. Let |parsed| be the result of [=parse JSON into Infra
    values|parsing JSON into Infra values=] given |data|. If this
    throws an exception, then [=respond with an error=] given
    |connection| and [=error code=] [=invalid argument=], and finally
    return.
    <!-- corresponds to Parse error (-32700) in JSON-RPC -->

 4. If any of the following conditions are false:

     1. |parsed| is a [=map=]

     2. |parsed|["<code>id</code>"] <a for=map>exists</a> and is an
        integer in the range [0, 2147483647].

         Issue: That's <i>2<sup>31</sup> - 1</i>, the largest signed
         32-bit integer. Should we allow up to <i>2<sup>53</sup> -
         1</i>, the largest number such that <i>N</i> and <i>N + 1</i>
         both have exact representations in a JS Number?

     3. |parsed|["<code>method</code>"] <a for=map>exists</a> and is a
        string.

     4. |parsed|["<code>params</code>"], if it <a for=map>exists</a>,
        is a [=map=].

     Issue: Should we fail if there are unknown keys in |parsed|? CDP
     does, but it's very unusual for unversioned web platform APIs.

    Then [=respond with an error=] given |connection| [=error code=]
    [=invalid argument=], and finally return.
    <!-- corresponds to Invalid Request (-32600) in JSON-RPC -->

 5. Issue: Command-specific parameter validation and dispatch.

</div>

<div algorithm>
To <dfn>respond with an error</dfn> given a [=WebSocket connection=]
|connection| and an [=error code=] |code|:

 1. Issue: Form a valid JSON |errorObject| given |code|.

 2. [=Send a WebSocket message=] comprised of |errorObject| over
    |connection|.

</div>

<div algorithm>
To <dfn>close the WebSocket connection</dfn> given a
[=WebSocket connection=] |connection|:

 1. Close the underlying network connection associated with |connection|.

 2. If there is a WebDriver [=session=] with |connection| as its [=connection=],
    set the [=connection=] on that [=session=] to null.

Issue: This should also reset any internal state

</div>

Note: This does not end any [=session=].

## Establishing a Connection ## {#establishing}

WebDriver clients opt in to a bidirectional connection by requesting a
capability with the name "<code>webSocketUrl</code>" and value
true.

This specification defines an
[=additional webdriver capability=] with the [=capability name=] "<code>webSocketUrl</code>".

<div algorithm="webSocketUrl capability deserialization algorithm">
The [=additional capability deserialization algorithm=] for the
"<code>webSocketUrl</code>" capability, with parameter |value| is:

 1. If |value| is not a boolean, return [=error=] with [=error code|code=]
    [=invalid argument=].

 2. Return [=success=] with data |value|.

</div>

<div algorithm="webSocketUrl capability serialization algorithm">
The [=matched capability serialization algorithm=] for the "<code>webSocketUrl</code>" capability,
with parameter |value| is:

 1. If |value| is false, return [=success=] with data null.

 2. Return [=success=] with data true.

</div>

<div algorithm="webSocketUrl new session algorithm">
The [=WebDriver new session algorithm=] defined by this specification,
with parameters |session| and |capabilities| is:

 1. Let |webSocketUrl| be the result of [=getting a property=] named
    "<code>webSocketUrl</code>" from |capabilities|.

 2. If |webSocketUrl| is undefined, return.

 3. Assert: |webSocketUrl| is true.

 4. [=Start listening for a WebSocket connection=] for |session|.

 5. [=Set a property=] "<code>webSocketUrl</code>" to |session|'s
    [=WebSocket URL=] on |capabilities|.

</div>
